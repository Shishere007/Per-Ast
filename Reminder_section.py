from ast import literal_eval
from tkinter import END, Button, Entry, Label, StringVar, Tk, mainloop, ttk
from data_types import convert, log, reminder, status
from file_operation import File
from operations import (
    change_status,
    clear_screen,
    duplicate,
    get_date_time,
    is_input_kill,
    write_log,
)

__name__ = "__reminder__"


class reminder_section(change_status):
    def __init__(self) -> None:
        super().__init__()
        self.__reminder_data_path = "Data/reminder_data.json"
        self.__completed_reminder_data_path = "Data/completed_reminder_data.json"
        self.__reminder_data_file = File(file_location=self.__reminder_data_path)
        self.__completed_reminder_data_file = File(
            file_location=self.__completed_reminder_data_path
        )

    def add_reminder(self) -> None:
        """
        To add reminder from main section
        """
        self.__add_reminder_read_data()

    def __add_reminder_read_data(self) -> None:
        """
        Read data from user for new reminder
        """
        try:
            reminder_data = input("reminder/Task : ")
            if is_input_kill(data=reminder_data):
                return
            reminder_type = input("Type : ")
            if is_input_kill(data=reminder_type):
                return
            if self.__add_reminder(
                reminder_data=reminder_data, reminder_type=reminder_type
            ):
                print("Reminder Added Successfully")
            else:
                print("Unable to add new reminder")
        except Exception as e:
            print(f"reminder > __add_reminder_read_data :- {e}")

    def auto_reminder(self, reminder_data: str, reminder_type: str) -> None:
        """
        Reminder which is auto generated by program itself
        """
        self.__add_reminder(reminder_data=reminder_data, reminder_type=reminder_type)

    def __sort_reminder_list(self, reminder_list=[str]) -> [reminder]:
        """
        Sort the reminder by their ID
        """
        reminder_list = duplicate(
            data_list=reminder_list, data_type="reminder"
        ).get_converted_list()
        # sorts the reminder list with reminder ID
        sorted_list = sorted(reminder_list, key=lambda rem: rem.get_id())
        return sorted_list

    def get_new_reminder_id(self) -> int:
        """
        Return reminder id for new reminder
        """
        file_data: list = (
            self.__reminder_data_file.read_data()
            + self.__completed_reminder_data_file.read_data()
        )
        file_data = self.__sort_reminder_list(reminder_list=file_data)
        if self.__reminder_data_file.is_empty():
            reminder_id = 0
        else:
            reminder_id = file_data[-1].get_id()
        reminder_id += 1
        return reminder_id

    def add_new_reminder(self, reminder_data: str, reminder_type: str) -> None:
        """
        add new reminder from outside the reminder class
        """
        if self.__add_reminder(
            reminder_data=reminder_data, reminder_type=reminder_type
        ):
            print("Reminder Added Successfully")
        else:
            print("Unable to add new reminder")

    def __add_reminder(self, reminder_data: str, reminder_type: str) -> bool:
        """
        Add new reminder to the list
        """
        try:
            reminder_id = self.get_new_reminder_id()
            new_reminder = reminder(
                new=True,
                reminder_id=reminder_id,
                reminder_data=reminder_data,
                reminder_type=reminder_type,
            )
            if not self.__reminder_data_file.append_one_data(
                data_to_append=new_reminder
            ):
                raise UserWarning
            self.__change_reminder_status()
            return True
        except UserWarning:
            print("Unable to write Data to file")
        except Exception as e:
            print(f"reminder > add_reminder :- {e}")
        return False

    def __delete_all_reminder(self) -> None:
        """
        Delete all the reminders in the file
        """
        try:
            if self.__is_pending_task_present():
                choice = input("Pending task present.\nDelete all (y/n) ? : ")
                if choice in ["y", "yes"]:
                    if (
                        self.__reminder_data_file.empty_file()
                        and self.__completed_reminder_data_file.empty_file()
                    ):
                        print("All reminders cleared")
                        self.__change_reminder_status()
        except Exception as e:
            print(f"reminder > __delete_all_reminder :- {e}")

    def show_reminder(self) -> None:
        """
        Show pending reminders, for access from main function
        """
        self.__show_reminders(user_input="show")

    def __show_reminders(self, user_input: str) -> None:
        """
        List all reminders in the list of specified.
        All is show if not specified
        """

        def show(reminder_list: [], do_convert: bool = False) -> None:
            """
            Print all reminders in the given list
            """
            for item in reminder_list:
                if do_convert:
                    item = convert(file_data=item).to_reminder()
                item.show()

        try:
            user_input_list = user_input.split()
            if len(user_input_list) == 1 or user_input_list[1] in ["pending", "pend"]:
                if not self.__reminder_data_file.is_empty():
                    reminder_list = self.__reminder_data_file.read_data()
                    show(reminder_list=reminder_list, do_convert=True)
                else:
                    print("No Pending reminders/tasks found")
            elif user_input_list[1] in ["com", "comp", "completed"]:
                if not self.__completed_reminder_data_file.is_empty():
                    reminder_list = self.__completed_reminder_data_file.read_data()
                    reminder_list = self.__sort_reminder_list(
                        reminder_list=reminder_list
                    )
                    show(reminder_list=reminder_list)
                else:
                    print("No completed Reminders found")
            elif user_input_list[1] == "all":
                if (
                    not self.__reminder_data_file.is_empty()
                    and not self.__completed_reminder_data_file.is_empty()
                ):
                    reminder_list = (
                        self.__reminder_data_file.read_data()
                        + self.__completed_reminder_data_file.read_data()
                    )
                    # sort the reminder list
                    reminder_list = self.__sort_reminder_list(
                        reminder_list=reminder_list
                    )
                    show(reminder_list=reminder_list)
                else:
                    print("No Reminders/tasks found")
            else:
                reminder_type = user_input[1]
                flag_count = 0
                reminder_list = self.__reminder_data_file.read_data()
                for item in reminder_list:
                    item = convert(file_data=item).to_reminder()
                    if item.get_type() == reminder_type:
                        flag_count += 1
                        item.show()
                if flag_count == 0:
                    print(
                        """
                        There are no tasks of given type
                        or
                        wrong reminder type
                        """
                    )

        except Exception as e:
            print(f"reminder > show_reminder :- {e}")

    def __get_reminder_id(self, user_input: str) -> bool:
        """
        Check if ID is in input, if not asks the user to give ID
        """
        try:
            reminder_id = literal_eval(user_input.split()[-1])
            if type(reminder_id) == int:
                pass
        except Exception:
            try:
                while True:
                    reminder_id = input("Task ID : ")
                    if not is_input_kill(data=user_input):
                        if type(literal_eval(reminder_id)) == int:
                            break
                    else:
                        return False
            except Exception:
                pass
        return int(reminder_id)

    def complete_reminder(self, user_input: str) -> None:
        """
        To set a reminder as completed from main section
        """
        self.__task_completed_read_data(user_input=user_input)

    def __task_completed_read_data(self, user_input: str) -> None:
        """
        Read reminder ID of the reminder which is to be set as 
        completed
        """
        try:
            if self.__is_pending_task_present():
                reminder_id = self.__get_reminder_id(user_input=user_input)
                if not reminder_id:
                    return
                self.__complete_task(reminder_id=reminder_id)
            else:
                print("No Pending Task found")
        except Exception as e:
            print(f"reminder > task_completed :- {e}")

    # to set a task as completed
    def __complete_task(self, reminder_id: int) -> None:
        """
        Set a task as completed
        """
        try:
            pending_reminder_list = self.__reminder_data_file.read_data()
            completed_reminder_list = self.__completed_reminder_data_file.read_data()
            for loopVar in range(len(pending_reminder_list)):
                item = convert(file_data=pending_reminder_list[loopVar]).to_reminder()
                if item.get_id() == reminder_id:
                    item.set_status()
                    # remove 'item' from pending reminder list
                    self.__reminder_data_file.delete_one_data(
                        file_data=pending_reminder_list,
                        data_to_delete=pending_reminder_list[loopVar],
                    )
                    # add 'item' to completed remidner list
                    self.__completed_reminder_data_file.append_one_data(
                        data_to_append=item
                    )
                    break
            else:
                for item in completed_reminder_list:
                    item = convert(file_data=item).to_reminder()
                    if item.get_id() == reminder_id:
                        print("Task is Already completed")
                        return
                else:
                    print("Wrong reminder ID")
                    return
            # to change data in the status file according to the changes made here
            self.__change_reminder_status()
            print("Task/reminder updated successfully")
        except Exception as e:
            print(f"reminder > __complete_task :- {e}")

    def delete_reminder(self, user_input: str) -> None:
        """
        To delete a reminder as completed from main section
        """
        self.__delete_task_read_data(user_input=user_input)

    def __delete_task_read_data(self, user_input: str) -> None:
        """
        Read reminder ID of the reminder which is to deleted
        """
        try:
            if self.__is_pending_task_present():
                reminder_id = self.__get_reminder_id(user_input=user_input)
                if not reminder_id:
                    return
                self.__delete_task(reminder_id=reminder_id)
            else:
                print("No Pending Task found")
        except Exception as e:
            print(f"reminder > __delete_task_read_data :- {e}")

    def __delete_task(self, reminder_id: int) -> None:
        """
        To delete a specific task
        """
        try:

            def find(reminder_list: [reminder]) -> int:
                """
                return index of item in list
                """
                for item in reminder_list:
                    if convert(file_data=item).to_reminder().get_id() == reminder_id:
                        return reminder_list.index(item)
                else:
                    return "False"

            pending_reminder_list = self.__reminder_data_file.read_data()
            reminder_index = find(reminder_list=pending_reminder_list)
            if reminder_index != "False":
                choice = input("task is not yet completed!\nDelete(y/n) ? : ")
                if choice not in ["y", "yes"]:
                    return
                if not self.__reminder_data_file.delete_one_data(
                    file_data=pending_reminder_list,
                    data_to_delete=pending_reminder_list[reminder_index],
                ):
                    print("Unable to delete data")
                    return

            else:
                completed_reminder_list = (
                    self.__completed_reminder_data_file.read_data()
                )
                reminder_index = find(reminder_list=completed_reminder_list)
                if reminder_index != "False":
                    if not self.__reminder_data_file.delete_one_data(
                        file_data=completed_reminder_list,
                        data_to_delete=completed_reminder_list[reminder_index],
                    ):
                        print("Unable to delete data")
                        return
                else:
                    print("Wrong reminder ID")
                    return
            self.__change_reminder_status()
            print("Task/reminder deleted successfully")
        except Exception as e:
            print(f"reminder > __delete_task :- {e}")

    def show_curresponding_reminder(self, reminder_type: str) -> None:
        """
        Show reminders curresponding to a spcific app when that app is opened
        """
        try:
            reminder_list = self.__reminder_data_file.read_data()
            flag = True
            if self.__is_pending_task_present():
                for item in reminder_list:
                    item = convert(file_data=item).to_reminder()
                    if item.get_type() == reminder_type and not item.is_completed():
                        if flag:
                            print("There are tasks pending related to this app")
                            flag = False
                        item.show()
        except Exception as e:
            print(f"reminder > show_curresponding_reminder :- {e}")

    def __pending_task_count(self) -> int:
        try:
            return self.__reminder_data_file.line_count()
        except Exception as e:
            print(f"reminder > __pending_task_count :- {e}")

    def __change_reminder_status(self) -> None:
        """
        Change reminder status in the status file
        """
        try:
            current_status = self._change_status__get_status()
            pending_task_count = self.__pending_task_count()
            if pending_task_count:
                current_status.set_reminder_pending_status(reminder_status=True)
            else:
                current_status.set_reminder_pending_status(reminder_status=False)
            current_status.set_reminder_pending_count(reminder_count=pending_task_count)
            self._change_status__write_status_to_file(current_status=current_status)
        except Exception as e:
            print(f"reminder > __change_reminder_status :- {e}")

    def __is_pending_task_present(self) -> bool:
        """
            True : Reminder Pending
            False: Reminder not pending
        """
        try:
            return self._change_status__get_status().get_reminder_pending_status()
        except Exception as e:
            print(f"reminder > __is_pending_task_present :- {e}")

    def __help(self) -> None:
        """
        Show command list
        """
        print(
            """
                Command List
                -> add/new      Add new task
                -> show         List reminders/Tasks [pending,completed,all]
                -> delete/del   Delete task
                -> pending      Check if pending task present
            """
        )

    def startup_reminder_check(self) -> None:
        """
        To check whether reminder are pending during startup and show curresponding 
        messges
        """
        try:
            current_status = self._change_status__get_status()
            if current_status.get_reminder_pending_status():
                print("Press Enter to pass, y/yes to check")
                if input(
                    f"There are {current_status.get_reminder_pending_count()} pending reminders.\nwould you like to check ? "
                ).lower() in ["yes", "y"]:
                    self.__show_reminders(type_or_status="pending")
                    print("type 'reminder' to access reminder section\n")
        except Exception as e:
            print(f"reminder > startup_reminder_check :- {e}")

    def user_section(self) -> bool:
        """
        reminder section, reading options from user
        reads choice and does the corresponding tasks
        """
        print("use break or stop to quit reminder/task section")
        while True:
            try:
                input_list = []
                user_input = input(">>> ")
                input_list.append(
                    log(
                        user_input=user_input,
                        section="reminder",
                        date_time=get_date_time(),
                    )
                )
                user_input_list = user_input.split()
                if (
                    len(set(user_input)) == 0
                    or len(set(user_input)) == 1
                    and not user_input.isalnum()
                ):
                    continue
                elif user_input in ["add", "new"]:
                    self.__add_reminder_read_data()
                elif user_input_list[0] in ["comp", "complete"]:
                    self.__task_completed_read_data(user_input=user_input)
                elif user_input_list[0] in ["del", "delete"]:
                    self.__delete_task_read_data(user_input=user_input)
                elif user_input_list[0] == "show":
                    self.__show_reminders(user_input=user_input)
                elif user_input == "help":
                    self.__help()
                elif user_input == "pending":
                    pending_task_count = self.__is_pending_task_present()
                    print(
                        f"There is {self.__pending_task_count()} pending task present"
                    )
                elif user_input in ["status"]:
                    change_status().show_status()
                elif user_input in ["break", "stop", "kill"]:
                    return False
                elif user_input in ["quit", "exit"]:
                    return True
                elif user_input in ["clear"]:
                    clear_screen()
                else:
                    print("not a command")
            except Exception:
                pass
            finally:
                write_log(data_list=input_list)


class add_reminder_gui:
    """
    GUI to add new process to list
    """

    def __init__(self) -> None:
        self.root = Tk()
        self.root.title("Add Reminder")
        self.root.minsize(500, 300)
        self.root.maxsize(500, 300)

        # ID Label and text box
        self.id_label = Label(self.root, text="ID")
        self.id_label.config(font="15")
        self.id_label.place(x=0, y=0)
        self.id_textbox = Entry(self.root)
        self.id_textbox.config(font="15")
        self.id_textbox.place(x=140, y=0)
        self.id_textbox.insert(1, reminder_section().get_new_reminder_id())
        self.id_textbox.configure(state="readonly")

        # reminder data label and textbox
        self.reminder_data_label = Label(self.root, text="Reminder")
        self.reminder_data_label.config(font="15")
        self.reminder_data_label.place(x=0, y=60)
        self.reminder_data_textbox = Entry(self.root, width="30")
        self.reminder_data_textbox.config(font="15")
        self.reminder_data_textbox.place(x=140, y=60)

        # reminder type label and textbox
        self.reminder_type_label = Label(self.root, text="Reminder Type")
        self.reminder_type_label.config(font="15")
        self.reminder_type_label.place(x=0, y=120)
        self.reminder_type_textbox = Entry(self.root)
        self.reminder_type_textbox.config(font="15")
        self.reminder_type_textbox.place(x=140, y=120)
        self.reminder_type_textbox.insert(1, "none")

        # Submit button
        self.submit_button = Button(
            self.root, width=10, text="Submit", command=self.__submit_data
        )
        self.submit_button.place(x=120, y=200)

        # Clear button
        self.clear_button = Button(
            self.root, width=10, text="Clear", command=self.__clear_field
        )
        self.clear_button.place(x=250, y=200)

        mainloop()

    def __clear_field(self) -> None:
        """
        Clear all text fields
        """
        # self.id_textbox.delete(0, END)
        self.reminder_data_textbox.delete(0, END)
        self.reminder_type_textbox.delete(0, END)

    def __submit_data(self) -> None:
        """
        Submit data and save it to file
        """
        try:
            # new_media = media(media_id=media_id,media_nam)
            # __reminder_id = self.id_textbox.get()
            __reminder_data = self.reminder_data_textbox.get()
            __reminder_type = self.reminder_type_textbox.get()
            if __reminder_data in ["", " "] or __reminder_type in [" ", ""]:
                return
            reminder_section().add_new_reminder(
                reminder_data=__reminder_data, reminder_type=__reminder_type
            )
            # exit()
            self.__clear_field()
        except Exception:
            pass


if __name__ == "__reminder__":
    pass
    # add_reminder_gui()
